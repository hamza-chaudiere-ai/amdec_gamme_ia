#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Application Flask pour AMDEC & Gamme IA - AVEC AUTHENTIFICATION TAQA INT√âGR√âE
‚úÖ NOUVEAU: Syst√®me d'authentification s√©curis√© par email professionnel @taqa.ma
‚úÖ Protection de toutes les routes critiques
‚úÖ Gestion des sessions utilisateur
‚úÖ Interface de connexion int√©gr√©e
‚úÖ Conservation de toutes les fonctionnalit√©s existantes
"""

import os
import sys
import stat
import json
from datetime import datetime
from functools import wraps
from werkzeug.utils import secure_filename
from flask import Flask, render_template, request, jsonify, send_file, flash, redirect, url_for, session
import logging
from typing import List

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Ajouter le r√©pertoire racine au PYTHONPATH
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# ‚úÖ NOUVEAU: Import du syst√®me d'authentification
try:
    from auth import AuthManager, EmailValidator, SessionManager
    AUTH_AVAILABLE = True
    logger.info("‚úÖ Modules d'authentification import√©s avec succ√®s")
except ImportError as e:
    AUTH_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è Modules d'authentification non disponibles: {e}")

# Imports des modules m√©tier existants
try:
    from core.excel_parser import ExcelParser
    from core.amdec_generator import AMDECGenerator
    from core.gamme_generator import GammeGenerator
    from core.data_trainer import DataTrainer
    from core.utils import (
        create_directories, 
        get_file_info, 
        format_component_display, 
        format_subcomponent_display,
        ComponentConfig
    )
    logger.info("‚úÖ Modules core import√©s avec succ√®s")
except ImportError as e:
    logger.error(f"‚ùå Erreur d'import des modules core: {e}")
    sys.exit(1)

# Import RAG avec gestion d'erreurs robuste
try:
    from rag import RAGEngine
    RAG_AVAILABLE = True
    logger.info("‚úÖ Module RAG import√© avec succ√®s")
except ImportError as e:
    RAG_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è Module RAG non disponible: {e}")

# Configuration Flask
app = Flask(__name__)
app.config['SECRET_KEY'] = 'amdec-gamme-ia-taqa-secure-2024'
app.config['MAX_CONTENT_LENGTH'] = 50 * 1024 * 1024  # 50MB max
app.config['UPLOAD_FOLDER'] = 'uploads'

# Extensions de fichiers autoris√©es
ALLOWED_EXTENSIONS = {'xlsx', 'xls'}

# ‚úÖ Variables globales pour l'authentification et RAG
auth_manager = None
rag_engine = None

# ===============================
# üîê SYST√àME D'AUTHENTIFICATION
# ===============================

def init_auth_system():
    """Initialise le syst√®me d'authentification"""
    global auth_manager
    
    if not AUTH_AVAILABLE:
        logger.warning("‚ö†Ô∏è Syst√®me d'authentification d√©sactiv√© - Mode d√©veloppement")
        return False
    
    try:
        logger.info("üîê Initialisation du syst√®me d'authentification TAQA...")
        auth_manager = AuthManager()
        logger.info("‚úÖ Syst√®me d'authentification initialis√©")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur initialisation authentification: {e}")
        return False

def require_auth(f):
    """
    D√©corateur pour prot√©ger les routes n√©cessitant une authentification
    """
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not AUTH_AVAILABLE or not auth_manager:
            # Mode d√©veloppement sans auth
            logger.info("‚ö†Ô∏è Mode d√©veloppement - Authentification d√©sactiv√©e")
            return f(*args, **kwargs)
        
        # R√©cup√©rer le token depuis les headers ou session
        auth_token = request.headers.get('Authorization')
        if auth_token and auth_token.startswith('Bearer '):
            auth_token = auth_token[7:]  # Supprimer "Bearer "
        else:
            auth_token = session.get('auth_token')
        
        if not auth_token:
            if request.is_json:
                return jsonify({
                    'success': False,
                    'error': 'Authentification requise',
                    'redirect_url': '/auth/login'
                }), 401
            else:
                return redirect(url_for('auth_login'))
        
        # V√©rifier la validit√© du token
        is_authenticated, user_email = auth_manager.is_user_authenticated(auth_token)
        
        if not is_authenticated:
            session.pop('auth_token', None)
            if request.is_json:
                return jsonify({
                    'success': False,
                    'error': 'Session expir√©e',
                    'redirect_url': '/auth/login'
                }), 401
            else:
                return redirect(url_for('auth_login', error='Session expir√©e'))
        
        # Ajouter les infos utilisateur au contexte de la requ√™te
        request.user_email = user_email
        request.user_info = auth_manager.get_user_info(auth_token)
        
        return f(*args, **kwargs)
    
    return decorated_function

def get_current_user():
    """R√©cup√®re les informations de l'utilisateur actuel"""
    if not AUTH_AVAILABLE or not auth_manager:
        return None
    
    auth_token = session.get('auth_token')
    if not auth_token:
        return None
    
    return auth_manager.get_user_info(auth_token)

# ===============================
# üîê ROUTES D'AUTHENTIFICATION
# ===============================

@app.route('/auth/login')
def auth_login():
    """Page de connexion"""
    # Si d√©j√† connect√©, rediriger vers l'accueil
    if AUTH_AVAILABLE and auth_manager and session.get('auth_token'):
        is_authenticated, _ = auth_manager.is_user_authenticated(session['auth_token'])
        if is_authenticated:
            return redirect(url_for('index'))
    
    return render_template('auth/login.html')

@app.route('/api/auth/send_code', methods=['POST'])
def api_send_verification_code():
    """API pour envoyer un code de v√©rification"""
    if not AUTH_AVAILABLE or not auth_manager:
        return jsonify({
            'success': False,
            'message': 'Syst√®me d\'authentification non disponible'
        }), 503
    
    try:
        data = request.get_json()
        email = data.get('email', '').strip().lower()
        
        if not email:
            return jsonify({
                'success': False,
                'message': 'Email requis'
            }), 400
        
        # Envoyer le code de v√©rification
        success, message = auth_manager.send_verification_code(email)
        
        return jsonify({
            'success': success,
            'message': message
        })
        
    except Exception as e:
        logger.error(f"Erreur envoi code de v√©rification: {e}")
        return jsonify({
            'success': False,
            'message': 'Erreur lors de l\'envoi du code'
        }), 500

@app.route('/api/auth/login', methods=['POST'])
def api_auth_login():
    """API pour se connecter avec email et code de v√©rification"""
    if not AUTH_AVAILABLE or not auth_manager:
        return jsonify({
            'success': False,
            'message': 'Syst√®me d\'authentification non disponible'
        }), 503
    
    try:
        data = request.get_json()
        email = data.get('email', '').strip().lower()
        verification_code = data.get('verification_code', '').strip()
        
        if not email or not verification_code:
            return jsonify({
                'success': False,
                'message': 'Email et code de v√©rification requis'
            }), 400
        
        # Tenter la connexion
        success, message, session_token = auth_manager.login_user(email, verification_code)
        
        if success and session_token:
            # Stocker le token dans la session Flask
            session['auth_token'] = session_token
            session['user_email'] = email
            session.permanent = True
            
            return jsonify({
                'success': True,
                'message': message,
                'session_token': session_token,
                'redirect_url': url_for('index'),
                'user_info': auth_manager.get_user_info(session_token)
            })
        else:
            return jsonify({
                'success': False,
                'message': message
            }), 401
            
    except Exception as e:
        logger.error(f"Erreur connexion: {e}")
        return jsonify({
            'success': False,
            'message': 'Erreur lors de la connexion'
        }), 500

@app.route('/api/auth/logout', methods=['POST'])
def api_auth_logout():
    """API pour se d√©connecter"""
    if not AUTH_AVAILABLE or not auth_manager:
        return jsonify({'success': True})
    
    try:
        auth_token = request.headers.get('Authorization')
        if auth_token and auth_token.startswith('Bearer '):
            auth_token = auth_token[7:]
        else:
            auth_token = session.get('auth_token')
        
        if auth_token:
            auth_manager.logout_user(auth_token)
        
        # Nettoyer la session Flask
        session.pop('auth_token', None)
        session.pop('user_email', None)
        
        return jsonify({
            'success': True,
            'message': 'D√©connexion r√©ussie'
        })
        
    except Exception as e:
        logger.error(f"Erreur d√©connexion: {e}")
        return jsonify({
            'success': False,
            'message': 'Erreur lors de la d√©connexion'
        }), 500

@app.route('/api/auth/status')
def api_auth_status():
    """API pour v√©rifier le statut d'authentification"""
    if not AUTH_AVAILABLE or not auth_manager:
        return jsonify({'authenticated': False})
    
    try:
        auth_token = request.headers.get('Authorization')
        if auth_token and auth_token.startswith('Bearer '):
            auth_token = auth_token[7:]
        else:
            auth_token = session.get('auth_token')
        
        if not auth_token:
            return jsonify({'authenticated': False})
        
        is_authenticated, user_email = auth_manager.is_user_authenticated(auth_token)
        
        if is_authenticated:
            user_info = auth_manager.get_user_info(auth_token)
            return jsonify({
                'authenticated': True,
                'user_email': user_email,
                'user_info': user_info
            })
        else:
            session.pop('auth_token', None)
            return jsonify({'authenticated': False})
            
    except Exception as e:
        logger.error(f"Erreur v√©rification statut auth: {e}")
        return jsonify({'authenticated': False})

@app.route('/auth/logout')
def auth_logout():
    """Route de d√©connexion"""
    if AUTH_AVAILABLE and auth_manager:
        auth_token = session.get('auth_token')
        if auth_token:
            auth_manager.logout_user(auth_token)
    
    session.clear()
    return redirect(url_for('auth_login', logout='success'))

# ===============================
# üè† ROUTES PRINCIPALES (PROT√âG√âES)
# ===============================

@app.route('/')
@require_auth
def index():
    """Page d'accueil prot√©g√©e"""
    try:
        # Statistiques de base
        stats = {
            'amdec_generated': len(os.listdir('data/generated/amdec')) if os.path.exists('data/generated/amdec') else 0,
            'gammes_generated': len(os.listdir('data/generated/gammes')) if os.path.exists('data/generated/gammes') else 0,
            'datasets_available': 2,
            'components_supported': 6,
            'rag_available': RAG_AVAILABLE and rag_engine is not None
        }
        
        # Ajouter les informations utilisateur si authentifi√©
        user_info = get_current_user()
        
        return render_template('index.html', stats=stats, user_info=user_info)
    except Exception as e:
        logger.error(f"Erreur page d'accueil: {e}")
        flash(f'Erreur lors du chargement: {str(e)}', 'error')
        return render_template('index.html', stats={'rag_available': False}, user_info=None)

@app.route('/amdec')
@require_auth
def amdec_page():
    """Page de g√©n√©ration AMDEC prot√©g√©e"""
    user_info = get_current_user()
    return render_template('amdec.html', user_info=user_info)

@app.route('/gamme')
@require_auth
def gamme_page():
    """Page de g√©n√©ration des gammes prot√©g√©e"""
    components = get_available_components()
    user_info = get_current_user()
    return render_template('gamme.html', components=components, user_info=user_info)

@app.route('/chatbot')
@require_auth
def chatbot_page():
    """Page du chatbot intelligent prot√©g√©e"""
    user_info = get_current_user()
    return render_template('chatbot.html', 
                         rag_available=RAG_AVAILABLE and rag_engine is not None,
                         user_info=user_info)

# ===============================
# üîß ROUTES API M√âTIER (PROT√âG√âES)
# ===============================

@app.route('/api/upload_historique', methods=['POST'])
@require_auth
def upload_historique():
    """Upload et traitement avec regroupement automatique (PROT√âG√â)"""
    try:
        # V√©rifier qu'un fichier a √©t√© envoy√©
        if 'file' not in request.files:
            return jsonify({
                'success': False,
                'error': 'Aucun fichier fourni'
            }), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({
                'success': False,
                'error': 'Nom de fichier vide'
            }), 400
        
        # Valider le fichier
        if not allowed_file(file.filename):
            return jsonify({
                'success': False,
                'error': 'Format de fichier non support√©. Utilisez .xlsx ou .xls'
            }), 400
        
        # Log de l'action utilisateur
        user_info = get_current_user()
        user_email = user_info.get('email', 'unknown') if user_info else 'unknown'
        logger.info(f"üìä Upload historique par {user_email}: {file.filename}")
        
        # Sauvegarder le fichier upload√©
        filename = secure_filename(file.filename)
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        safe_filename = f"historique_{timestamp}_{filename}"
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], safe_filename)
        
        file.save(filepath)
        logger.info(f"üìÅ Fichier historique sauvegard√©: {filepath}")
        
        # Parser le fichier Excel
        parser = ExcelParser(filepath)
        processed_data = parser.parse()
        
        if processed_data.empty:
            return jsonify({
                'success': False,
                'error': 'Aucune donn√©e valide trouv√©e dans le fichier'
            }), 400
        
        logger.info(f"üìä Donn√©es parsed: {len(processed_data)} lignes avant regroupement")
        
        # G√©n√©rer l'AMDEC avec regroupement automatique
        amdec_generator = AMDECGenerator(processed_data)
        amdec_df = amdec_generator.generate()
        
        if amdec_df.empty:
            return jsonify({
                'success': False,
                'error': 'Impossible de g√©n√©rer l\'AMDEC √† partir de cet historique'
            }), 400
        
        logger.info(f"‚úÖ AMDEC g√©n√©r√©e par {user_email}: {len(amdec_df)} lignes apr√®s regroupement intelligent")
        
        # Sauvegarder l'AMDEC g√©n√©r√©
        amdec_file_path = amdec_generator.save_to_file()
        
        # Statistiques
        stats = amdec_generator.get_statistics()
        parser_stats = parser.get_statistics()
        
        # G√©n√©ration automatique des gammes avec images
        try:
            logger.info("üîÑ G√©n√©ration automatique des gammes avec images...")
            gammes_generated = amdec_generator.generate_gammes_from_amdec(amdec_file_path)
            auto_gammes_success = True
            gammes_count = len(gammes_generated)
            gammes_files = [os.path.basename(g) for g in gammes_generated]
            
            logger.info(f"‚úÖ {gammes_count} gammes g√©n√©r√©es automatiquement par {user_email}")
            
        except Exception as gamme_error:
            logger.warning(f"‚ö†Ô∏è Erreur g√©n√©ration gammes pour {user_email}: {gamme_error}")
            gammes_generated = []
            auto_gammes_success = False
            gammes_count = 0
            gammes_files = []
        
        # Nettoyer le fichier temporaire
        try:
            os.remove(filepath)
        except:
            pass
        
        return jsonify({
            'success': True,
            'filename': os.path.basename(amdec_file_path),
            'rows_processed': int(parser_stats.get('total_rows', 0)),
            'amdec_entries': int(len(amdec_df)),
            'avg_criticality': round(float(stats.get('avg_criticality', 0)), 1),
            'max_criticality': int(stats.get('max_criticality', 0)),
            'auto_gammes_generated': auto_gammes_success,
            'gammes_count': int(gammes_count),
            'gammes_files': gammes_files,
            'grouped_entries': True,
            'images_in_gammes': auto_gammes_success,
            'user_email': user_email,
            'statistics': {
                'unique_components': int(stats.get('unique_components', 0)),
                'unique_subcomponents': int(stats.get('unique_subcomponents', 0)),
                'criticality_distribution': stats.get('criticality_distribution', {})
            }
        })

    except Exception as e:
        user_info = get_current_user()
        user_email = user_info.get('email', 'unknown') if user_info else 'unknown'
        logger.error(f"‚ùå Erreur upload historique par {user_email}: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/generate_amdec_from_dataset', methods=['POST'])
@require_auth
def generate_amdec_from_dataset():
    """G√©n√®re AMDEC depuis dataset (PROT√âG√â)"""
    try:
        data = request.get_json()
        component = data.get('component')
        subcomponent = data.get('subcomponent')
        
        if not component:
            return jsonify({
                'success': False,
                'error': 'Composant requis'
            }), 400
        
        user_info = get_current_user()
        user_email = user_info.get('email', 'unknown') if user_info else 'unknown'
        logger.info(f"üîÑ G√©n√©ration AMDEC dataset par {user_email}: {component} - {subcomponent}")
        
        # Utiliser le trainer pour g√©n√©rer depuis le dataset
        trainer = DataTrainer()
        amdec_data = trainer.generate_amdec_from_dataset(component, subcomponent)
        
        if not amdec_data:
            return jsonify({
                'success': False,
                'error': 'Aucune donn√©e trouv√©e pour ce composant dans le dataset'
            }), 404
        
        # Cr√©er l'AMDEC Generator et sauvegarder
        amdec_generator = AMDECGenerator()
        amdec_file_path = amdec_generator.save_dataset_amdec(amdec_data, component, subcomponent)
        
        # Calculer les statistiques
        stats = {
            'total_entries': len(amdec_data),
            'avg_criticality': sum(entry['C'] for entry in amdec_data) / len(amdec_data),
            'max_criticality': max(entry['C'] for entry in amdec_data),
            'unique_components': len(set(entry['Composant'] for entry in amdec_data)),
            'unique_subcomponents': len(set(entry['Sous-composant'] for entry in amdec_data))
        }
        
        # G√©n√©ration automatique des gammes avec images
        try:
            logger.info("üîÑ G√©n√©ration automatique des gammes avec images d'appareils...")
            gammes_generated = amdec_generator.generate_gammes_from_amdec(amdec_file_path)
            
            response_data = {
                'success': True,
                'amdec_file': os.path.basename(amdec_file_path),
                'gammes_files': [os.path.basename(g) for g in gammes_generated],
                'entries_count': len(amdec_data),
                'avg_criticality': round(stats['avg_criticality'], 1),
                'max_criticality': stats['max_criticality'],
                'component': format_component_display(component),
                'subcomponent': format_subcomponent_display(subcomponent) if subcomponent else 'Tous',
                'auto_gammes_generated': True,
                'gammes_count': len(gammes_generated),
                'images_included': True,
                'user_email': user_email
            }
            
            logger.info(f"‚úÖ AMDEC + {len(gammes_generated)} gammes avec images g√©n√©r√©es par {user_email}")
            
        except Exception as gamme_error:
            logger.warning(f"‚ö†Ô∏è Erreur g√©n√©ration gammes automatiques par {user_email}: {gamme_error}")
            
            response_data = {
                'success': True,
                'amdec_file': os.path.basename(amdec_file_path),
                'entries_count': len(amdec_data),
                'avg_criticality': round(stats['avg_criticality'], 1),
                'max_criticality': stats['max_criticality'],
                'component': format_component_display(component),
                'subcomponent': format_subcomponent_display(subcomponent) if subcomponent else 'Tous',
                'auto_gammes_generated': False,
                'gamme_error': str(gamme_error),
                'user_email': user_email
            }
        
        return jsonify(response_data)
        
    except Exception as e:
        user_info = get_current_user()
        user_email = user_info.get('email', 'unknown') if user_info else 'unknown'
        logger.error(f"‚ùå Erreur g√©n√©ration AMDEC dataset par {user_email}: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/generate_gamme', methods=['POST'])
@require_auth
def generate_gamme():
    """G√©n√®re gamme avec images d'appareils (PROT√âG√â)"""
    try:
        data = request.get_json()
        component = data.get('component')
        subcomponent = data.get('subcomponent') 
        criticality = data.get('criticality')
        
        if not all([component, subcomponent]):
            return jsonify({
                'success': False,
                'error': 'Composant et sous-composant requis'
            }), 400
        
        user_info = get_current_user()
        user_email = user_info.get('email', 'unknown') if user_info else 'unknown'
        
        # Utiliser la criticit√© fournie ou calculer automatiquement
        if criticality is None:
            criticality = ComponentConfig.get_default_criticality(component, subcomponent)
        
        logger.info(f"üîÑ G√©n√©ration gamme avec images par {user_email}: {component} - {subcomponent} (C={criticality})")
        
        # G√©n√©rer la gamme avec images d'appareils int√©gr√©es
        gamme_generator = GammeGenerator()
        gamme_data = gamme_generator.generate(component, subcomponent, criticality)
        
        # Enrichir avec des informations AMDEC si disponibles
        gamme_data['enhanced_with_amdec'] = False
        try:
            trainer = DataTrainer()
            amdec_data = trainer.generate_amdec_from_dataset(component, subcomponent)
            
            if amdec_data:
                amdec_entry = amdec_data[0]
                gamme_data['amdec_mode'] = amdec_entry.get('Mode de D√©faillance', '')
                gamme_data['amdec_cause'] = amdec_entry.get('Cause', '')
                gamme_data['amdec_actions'] = amdec_entry.get('Actions Correctives', '')
                gamme_data['enhanced_with_amdec'] = True
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Impossible d'enrichir avec AMDEC: {e}")
        
        # Sauvegarder la gamme avec images d'appareils int√©gr√©es
        output_path = gamme_generator.save_to_file(gamme_data, component, subcomponent)
        
        # Pr√©parer les aper√ßus d'op√©rations
        operations_preview = []
        for op in gamme_data.get('operations', [])[:3]:
            operations_preview.append(f"{op.get('name', 'Op√©ration')} ({op.get('time', 0)} min)")
        
        return jsonify({
            'success': True,
            'filename': os.path.basename(output_path),
            'component_display': gamme_data['component'],
            'subcomponent_display': gamme_data['subcomponent'],
            'criticality': criticality,
            'criticality_level': gamme_data['criticality_level'],
            'estimated_time': gamme_data['estimated_time'],
            'frequency': gamme_data['maintenance_frequency'],
            'operations_count': len(gamme_data.get('operations', [])),
            'operations_preview': operations_preview,
            'materials_count': len(gamme_data.get('materials', [])),
            'enhanced_with_amdec': gamme_data.get('enhanced_with_amdec', False),
            'safety_instructions': len(gamme_data.get('safety_instructions', [])),
            'images_included': len(gamme_data.get('images', [])),
            'images_count': len(gamme_data.get('images', [])),
            'images_integrated_in_word': True,
            'user_email': user_email
        })
        
    except Exception as e:
        user_info = get_current_user()
        user_email = user_info.get('email', 'unknown') if user_info else 'unknown'
        logger.error(f"‚ùå Erreur g√©n√©ration gamme par {user_email}: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/train_models', methods=['POST'])
@require_auth
def train_models():
    """Entra√Æne les mod√®les ML (PROT√âG√â)"""
    try:
        data = request.get_json()
        model_type = data.get('model_type', 'both')
        
        user_info = get_current_user()
        user_email = user_info.get('email', 'unknown') if user_info else 'unknown'
        logger.info(f"üß† Entra√Ænement mod√®les par {user_email}: {model_type}")
        
        trainer = DataTrainer()
        results = trainer.train_models(model_type)
        
        return jsonify({
            'success': True,
            'message': 'Mod√®les entra√Æn√©s avec succ√®s',
            'results': results,
            'user_email': user_email
        })
        
    except Exception as e:
        user_info = get_current_user()
        user_email = user_info.get('email', 'unknown') if user_info else 'unknown'
        logger.error(f"‚ùå Erreur entra√Ænement par {user_email}: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/components')
@require_auth
def get_components():
    """Retourne la liste des composants disponibles (PROT√âG√â)"""
    components = get_available_components()
    return jsonify(components)

@app.route('/api/criticality', methods=['POST'])
@require_auth
def calculate_criticality():
    """Calcule la criticit√© pour un composant/sous-composant (PROT√âG√â)"""
    try:
        data = request.get_json()
        component = data.get('component')
        subcomponent = data.get('subcomponent')
        
        # Calculer la criticit√©
        trainer = DataTrainer()
        criticality = trainer.predict_criticality(component, subcomponent)
        
        return jsonify({
            'criticality': criticality,
            'level': get_criticality_level(criticality),
            'description': get_criticality_description(criticality)
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erreur calcul criticit√©: {e}")
        return jsonify({'error': str(e)}), 500

# ===============================
# ü§ñ ROUTES CHATBOT RAG (PROT√âG√âES)
# ===============================

@app.route('/api/chatbot/query', methods=['POST'])
@require_auth
def chatbot_query():
    """API pour les questions du chatbot (PROT√âG√â)"""
    try:
        if not RAG_AVAILABLE or not rag_engine:
            return jsonify({
                'success': False,
                'error': 'Chatbot non disponible',
                'response': 'D√©sol√©, le chatbot intelligent n\'est pas encore configur√©.'
            }), 503
        
        data = request.get_json()
        question = data.get('question', '').strip()
        
        if not question:
            return jsonify({
                'success': False,
                'error': 'Question vide'
            }), 400
        
        if len(question) > 1000:
            return jsonify({
                'success': False,
                'error': 'Question trop longue (max 1000 caract√®res)'
            }), 400
        
        user_info = get_current_user()
        user_email = user_info.get('email', 'unknown') if user_info else 'unknown'
        logger.info(f"ü§ñ Question chatbot par {user_email}: {question[:100]}...")
        
        # Traitement via RAG
        result = rag_engine.query(question, max_context_length=3000)
        
        # Formater la r√©ponse
        response_data = {
            'success': True,
            'response': result.get('response', 'Aucune r√©ponse g√©n√©r√©e'),
            'sources': result.get('sources', []),
            'detected_components': result.get('detected_components', []),
            'detected_defects': result.get('detected_defects', []),
            'confidence': result.get('confidence', 0.0),
            'timestamp': result.get('timestamp'),
            'context_length': len(result.get('context', '')),
            'has_context': bool(result.get('context', '').strip()),
            'user_email': user_email
        }
        
        return jsonify(response_data)
        
    except Exception as e:
        user_info = get_current_user()
        user_email = user_info.get('email', 'unknown') if user_info else 'unknown'
        logger.error(f"‚ùå Erreur chatbot query par {user_email}: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'response': 'D√©sol√©, une erreur technique s\'est produite.'
        }), 500

@app.route('/api/chatbot/status')
@require_auth
def chatbot_status():
    """Statut du syst√®me chatbot (PROT√âG√â)"""
    try:
        if not RAG_AVAILABLE:
            return jsonify({
                'available': False,
                'error': 'Module RAG non disponible',
                'rag_installed': False
            })
        
        if not rag_engine:
            return jsonify({
                'available': False,
                'error': 'Moteur RAG non initialis√©',
                'rag_installed': True,
                'initialized': False
            })
        
        # Obtenir le statut d√©taill√©
        status = rag_engine.get_system_status()
        
        return jsonify({
            'available': True,
            'rag_installed': True,
            'initialized': status.get('initialized', False),
            'status': status
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erreur statut chatbot: {e}")
        return jsonify({
            'available': False,
            'error': str(e)
        }), 500

@app.route('/api/chatbot/suggestions')
@require_auth
def chatbot_suggestions():
    """Retourne des suggestions de questions (PROT√âG√â)"""
    try:
        suggestions = [
            "J'ai un percement sur l'√©conomiseur BT, que faire ?",
            "Qu'est-ce que la corrosion caustic attack ?",
            "Comment contr√¥ler les surchauffeurs haute temp√©rature ?",
            "Quelle est la criticit√© d'une fissure sur un collecteur ?",
            "Comment pr√©venir l'√©rosion des tubes porteurs ?",
            "Que signifie F√óG√óD dans l'analyse AMDEC ?",
            "Quels sont les d√©fauts courants des r√©chauffeurs HT ?",
            "Comment faire la maintenance pr√©ventive d'un √©conomiseur ?"
        ]
        
        import random
        selected = random.sample(suggestions, min(4, len(suggestions)))
        
        return jsonify({
            'success': True,
            'suggestions': selected
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erreur suggestions: {e}")
        return jsonify({
            'success': False,
            'suggestions': []
        })

# ===============================
# üìÅ ROUTES UTILITAIRES (PROT√âG√âES)
# ===============================

@app.route('/api/list_generated_files', methods=['GET'])
@require_auth
def list_generated_files():
    """Liste tous les fichiers AMDEC et Gammes g√©n√©r√©s (PROT√âG√â)"""
    try:
        amdec_dir = 'data/generated/amdec'
        gammes_dir = 'data/generated/gammes'
        
        amdec_files = []
        gammes_files = []
        
        # Lister les fichiers AMDEC
        if os.path.exists(amdec_dir):
            for filename in os.listdir(amdec_dir):
                if filename.endswith('.xlsx'):
                    filepath = os.path.join(amdec_dir, filename)
                    stat = os.stat(filepath)
                    amdec_files.append({
                        'filename': filename,
                        'size': stat.st_size,
                        'modified': datetime.fromtimestamp(stat.st_mtime).isoformat()
                    })
        
        # Lister les fichiers Gammes  
        if os.path.exists(gammes_dir):
            for filename in os.listdir(gammes_dir):
                if filename.endswith('.docx'):
                    filepath = os.path.join(gammes_dir, filename)
                    stat = os.stat(filepath)
                    gammes_files.append({
                        'filename': filename,
                        'size': stat.st_size,
                        'modified': datetime.fromtimestamp(stat.st_mtime).isoformat(),
                        'has_images': True
                    })
        
        # Trier par date de modification (plus r√©cents en premier)
        amdec_files.sort(key=lambda x: x['modified'], reverse=True)
        gammes_files.sort(key=lambda x: x['modified'], reverse=True)
        
        return jsonify({
            'success': True,
            'amdec_files': amdec_files,
            'gammes_files': gammes_files,
            'total_amdec': len(amdec_files),
            'total_gammes': len(gammes_files),
            'images_integrated': True
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erreur listage fichiers: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/download/<path:filename>')
@require_auth
def download_file(filename):
    """T√©l√©charge un fichier g√©n√©r√© (PROT√âG√â)"""
    try:
        user_info = get_current_user()
        user_email = user_info.get('email', 'unknown') if user_info else 'unknown'
        logger.info(f"üì• T√©l√©chargement par {user_email}: {filename}")
        
        # V√©rifier si le fichier existe
        full_path = None
        for root, dirs, files in os.walk('data/generated'):
            if filename in files:
                full_path = os.path.join(root, filename)
                break
        
        if not full_path or not os.path.exists(full_path):
            return jsonify({'error': 'Fichier non trouv√©'}), 404
        
        return send_file(full_path, as_attachment=True)
        
    except Exception as e:
        logger.error(f"‚ùå Erreur t√©l√©chargement: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health')
def health_check():
    """Point de sant√© de l'application (PUBLIC)"""
    health_data = {
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'modules': {
            'excel_parser': True,
            'amdec_generator': True,
            'gamme_generator': True,
            'data_trainer': True,
            'rag_engine': RAG_AVAILABLE and rag_engine is not None,
            'auth_system': AUTH_AVAILABLE and auth_manager is not None
        },
        'security': {
            'authentication_enabled': AUTH_AVAILABLE,
            'active_sessions': auth_manager.get_active_sessions_count() if auth_manager else 0,
            'protected_routes': True
        }
    }
    
    # Ajouter les informations RAG
    if RAG_AVAILABLE and rag_engine:
        try:
            rag_status = rag_engine.get_system_status()
            health_data['rag'] = {
                'available': True,
                'initialized': rag_status.get('initialized', False),
                'vector_documents': rag_status.get('vector_store', {}).get('total_documents', 0),
                'llm_healthy': rag_status.get('llm_client', {}).get('healthy', False)
            }
        except Exception as e:
            health_data['rag'] = {'available': True, 'error': str(e)}
    else:
        health_data['rag'] = {'available': False}
    
    return jsonify(health_data)

# ===============================
# üîß FONCTIONS UTILITAIRES
# ===============================

def allowed_file(filename):
    """V√©rifie si l'extension du fichier est autoris√©e"""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def init_vector_db_and_permissions():
    """Initialise la base vectorielle et les permissions"""
    try:
        logger.info("üîÑ Initialisation base vectorielle...")
        
        directories = [
            "data", "data/vector_db", "data/documents", "data/generated",
            "data/generated/amdec", "data/generated/gammes", "data/dataset",
            "data/templates", "uploads", "logs"
        ]
        
        for directory in directories:
            try:
                os.makedirs(directory, exist_ok=True)
                if os.name == 'nt':
                    os.chmod(directory, stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO)
                else:
                    os.chmod(directory, 0o777)
            except Exception as e:
                logger.warning(f"  ‚ö†Ô∏è Erreur {directory}: {e}")
        
        logger.info("‚úÖ Initialisation base vectorielle termin√©e")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur initialisation base vectorielle: {e}")
        return False

def init_rag_engine():
    """Initialise le moteur RAG"""
    global rag_engine
    
    if not RAG_AVAILABLE:
        logger.warning("‚ö†Ô∏è Module RAG non disponible")
        return False
    
    try:
        logger.info("üß† Initialisation du moteur RAG...")
        rag_engine = RAGEngine(
            documents_dir="data/documents",
            vector_db_path="data/vector_db", 
            llm_config_path="llm_config.json"
        )
        
        success = rag_engine.initialize(force_reindex=True)
        
        if success:
            logger.info("‚úÖ Moteur RAG initialis√©")
        else:
            logger.error("‚ùå √âchec initialisation moteur RAG")
            
        return success
        
    except Exception as e:
        logger.error(f"‚ùå Erreur initialisation RAG: {e}")
        rag_engine = None
        return False

def init_app():
    """Initialise l'application avec authentification"""
    try:
        # Cr√©er les r√©pertoires de base
        create_directories()
        logger.info("‚úÖ R√©pertoires de base cr√©√©s")
        
        # Initialiser la base vectorielle et permissions
        init_vector_db_and_permissions()
        
        # Initialiser le syst√®me d'authentification
        auth_initialized = init_auth_system()
        
        # Initialiser le moteur RAG si disponible
        if RAG_AVAILABLE:
            init_rag_engine()
        
        logger.info("‚úÖ Application initialis√©e avec succ√®s")
        
        if auth_initialized:
            logger.info("üîê Syst√®me d'authentification TAQA actif")
        else:
            logger.warning("‚ö†Ô∏è Mode d√©veloppement sans authentification")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur initialisation application: {e}")

def get_available_components():
    """Retourne la liste des composants support√©s"""
    return ComponentConfig.get_component_list()

def get_criticality_level(criticality):
    """Retourne le niveau de criticit√©"""
    if criticality <= 12:
        return 'N√©gligeable'
    elif criticality <= 16:
        return 'Moyenne'
    elif criticality <= 20:
        return '√âlev√©e'
    else:
        return 'Critique'

def get_criticality_description(criticality):
    """Retourne la description de la criticit√©"""
    if criticality <= 12:
        return 'Maintenance corrective suffisante'
    elif criticality <= 16:
        return 'Maintenance pr√©ventive syst√©matique recommand√©e'
    elif criticality <= 20:
        return 'Maintenance pr√©ventive conditionnelle n√©cessaire'
    else:
        return 'Remise en cause compl√®te de la conception requise'

# ===============================
# üîß GESTIONNAIRES D'ERREURS
# ===============================

@app.errorhandler(401)
def unauthorized(e):
    """Gestionnaire d'erreur pour acc√®s non autoris√©"""
    if request.is_json:
        return jsonify({
            'error': 'Acc√®s non autoris√© - Connexion TAQA requise',
            'redirect_url': '/auth/login'
        }), 401
    else:
        return redirect(url_for('auth_login', error='Acc√®s non autoris√©'))

@app.errorhandler(413)
def too_large(e):
    """Gestionnaire d'erreur pour fichiers trop volumineux"""
    return jsonify({'error': 'Fichier trop volumineux (max 50MB)'}), 413

@app.errorhandler(500)
def internal_error(e):
    """Gestionnaire d'erreur interne"""
    logger.error(f"‚ùå Erreur interne: {e}")
    return jsonify({'error': 'Erreur interne du serveur'}), 500

@app.errorhandler(404)
def not_found(e):
    """Gestionnaire d'erreur 404"""
    return jsonify({'error': 'Page non trouv√©e'}), 404

# ===============================
# üöÄ LANCEMENT DE L'APPLICATION
# ===============================

if __name__ == '__main__':
    try:
        # Initialiser l'application
        init_app()
        
        # Message de confirmation
        logger.info("üöÄ" + "="*60)
        logger.info("üöÄ AMDEC & GAMME IA - VERSION S√âCURIS√âE TAQA MOROCCO")
        logger.info("üöÄ" + "="*60)
        logger.info("‚úÖ FIX 1: Regroupement automatique des fr√©quences AMDEC")
        logger.info("‚úÖ FIX 2: Images d'appareils int√©gr√©es dans les gammes")
        logger.info("‚úÖ FIX 3: G√©n√©ration automatique gammes depuis AMDEC")
        logger.info("‚úÖ FIX 4: Correction erreur huggingface_hub")
        logger.info("‚úÖ FIX 5: R√©initialisation base vectorielle")
        logger.info("ü§ñ RAG: Chatbot intelligent avec base de connaissances")
        logger.info("üîê NOUVEAU: Authentification s√©curis√©e @taqa.ma")
        
        # Statut authentification
        if AUTH_AVAILABLE and auth_manager:
            logger.info("üîê Authentification: ‚úÖ ACTIVE (@taqa.ma uniquement)")
            stats = auth_manager.get_system_stats()
            logger.info(f"üë• Sessions actives: {stats.get('active_sessions', 0)}")
        else:
            logger.warning("üîê Authentification: ‚ö†Ô∏è D√âSACTIV√âE (mode d√©veloppement)")
        
        # Statut RAG
        if RAG_AVAILABLE and rag_engine:
            try:
                status = rag_engine.get_system_status()
                if status.get('initialized'):
                    docs = status.get('vector_store', {}).get('total_documents', 0)
                    logger.info(f"üß† RAG: ‚úÖ Op√©rationnel ({docs} documents)")
                else:
                    logger.warning("üß† RAG: ‚ö†Ô∏è Erreur d'initialisation")
            except:
                logger.warning("üß† RAG: ‚ö†Ô∏è Statut indisponible")
        else:
            logger.warning("üß† RAG: ‚ö†Ô∏è Non disponible")
        
        logger.info("üöÄ" + "="*60)
        logger.info("üåê Application S√âCURIS√âE disponible sur:")
        if AUTH_AVAILABLE:
            logger.info("   ‚Ä¢ http://localhost:5000/auth/login    (üîê Connexion TAQA)")
            logger.info("   ‚Ä¢ http://localhost:5000               (üè† Accueil prot√©g√©)")
            logger.info("   ‚Ä¢ http://localhost:5000/amdec         (üìä AMDEC prot√©g√©)")
            logger.info("   ‚Ä¢ http://localhost:5000/gamme         (üõ†Ô∏è Gammes prot√©g√©)")
            logger.info("   ‚Ä¢ http://localhost:5000/chatbot       (ü§ñ Chatbot prot√©g√©)")
        else:
            logger.info("   ‚Ä¢ http://localhost:5000               (üè† Mode d√©veloppement)")
        logger.info("   ‚Ä¢ http://localhost:5000/health        (üìã Statut syst√®me)")
        logger.info("üîê Seuls les emails @taqa.ma sont autoris√©s !")
        logger.info("üöÄ" + "="*60)
        
        # Lancer le serveur
        app.run(host='0.0.0.0', port=5000, debug=True)
        
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è Application arr√™t√©e par l'utilisateur")
    except Exception as e:
        logger.error(f"\n‚ùå Erreur critique: {e}")
        import traceback
        traceback.print_exc()
    finally:
        logger.info("üîö Arr√™t de l'application AMDEC & Gamme IA")